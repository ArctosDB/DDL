---missing id columns
SELECT dbms_metadata.get_ddl('TABLE',table_name)
FROM user_tables 
WHERE TABLE_name IN (
'AGENT_RELATIONS',
'BIOL_INDIV_RELATIONS',
'COLLECTOR',
'COLL_OBJ_CONT_HIST',
'CONTAINER_HISTORY',
'ELECTRONIC_ADDRESS',
'FLUID_CONTAINER_HISTORY',
'GROUP_MEMBER',
'IDENTIFICATION_TAXONOMY',
'LOAN_ITEM',
'PROJECT_AGENT',
'PROJECT_PUBLICATION',
'PROJECT_TRANS',
'PUBLICATION_AUTHOR_NAME',
'SHIPMENT',
'TAXON_RELATIONS',
'VESSEL')
ORDER BY table_name;

SELECT dbms_metadata.get_ddl('INDEX',index_name)
FROM user_indexes 
WHERE TABLE_name IN (
'AGENT_RELATIONS',
'BIOL_INDIV_RELATIONS',
'COLLECTOR',
'COLL_OBJ_CONT_HIST',
'CONTAINER_HISTORY',
'ELECTRONIC_ADDRESS',
'FLUID_CONTAINER_HISTORY',
'GROUP_MEMBER',
'IDENTIFICATION_TAXONOMY',
'LOAN_ITEM',
'PROJECT_AGENT',
'PROJECT_PUBLICATION',
'PROJECT_TRANS',
'PUBLICATION_AUTHOR_NAME',
'SHIPMENT',
'TAXON_RELATIONS',
'VESSEL')
ORDER BY table_name;

SELECT * FROM table_privileges WHERE table_name IN (
'AGENT_RELATIONS',
'BIOL_INDIV_RELATIONS',
'COLLECTOR',
'COLL_OBJ_CONT_HIST',
'CONTAINER_HISTORY',
'ELECTRONIC_ADDRESS',
'FLUID_CONTAINER_HISTORY',
'GROUP_MEMBER',
'IDENTIFICATION_TAXONOMY',
'LOAN_ITEM',
'PROJECT_AGENT',
'PROJECT_PUBLICATION',
'PROJECT_TRANS',
'PUBLICATION_AUTHOR_NAME',
'SHIPMENT',
'TAXON_RELATIONS',
'VESSEL')
ORDER BY table_name;

CREATE INDEX XIF478AGENT_RELATIONS ON AGENT_RELATIONS (AGENT_ID)
CREATE INDEX XIF479AGENT_RELATIONS ON AGENT_RELATIONS (RELATED_AGENT_ID)
CREATE UNIQUE INDEX XPKAGENT_RELATIONS ON AGENT_RELATIONS (AGENT_ID, RELATED_AGENT_ID, AGENT_RELATIONSHIP)
CREATE INDEX XIF261BIOL_INDIV_RELATIONS ON BIOL_INDIV_RELATIONS (RELATED_COLL_OBJECT_ID)
CREATE UNIQUE INDEX PKEY_BIOL_INDIV_RELATIONS ON BIOL_INDIV_RELATIONS (COLLECTION_OBJECT_ID, RELATED_COLL_OBJECT_ID, BIOL_INDIV_RELATIONSHIP)
CREATE UNIQUE INDEX XAK1COLLECTOR ON COLLECTOR (COLLECTION_OBJECT_ID, COLL_ORDER, COLLECTOR_ROLE)
CREATE INDEX XIF284COLLECTOR ON COLLECTOR (COLLECTION_OBJECT_ID)
CREATE INDEX XIF286COLLECTOR ON COLLECTOR (AGENT_ID)
CREATE INDEX XIE2COLLECTOR ON COLLECTOR (COLLECTOR_ROLE)
CREATE INDEX XIE1COLLECTOR ON COLLECTOR (COLL_NUM)
CREATE UNIQUE INDEX PKEY_COLLECTOR ON COLLECTOR (COLLECTION_OBJECT_ID, AGENT_ID, COLLECTOR_ROLE)
CREATE INDEX COLL_OBJ_CONT_HIST ON COLL_OBJ_CONT_HIST (COLLECTION_OBJECT_ID)
CREATE INDEX XIF622COLL_OBJ_CONT_HIST ON COLL_OBJ_CONT_HIST (CONTAINER_ID)
CREATE UNIQUE INDEX XPKCOLL_OBJ_CONT_HIST ON COLL_OBJ_CONT_HIST (INSTALLED_DATE, CONTAINER_ID, COLLECTION_OBJECT_ID)
CREATE INDEX XIF611CONTAINER_HISTORY ON CONTAINER_HISTORY (CONTAINER_ID)
CREATE INDEX XIF490ELECTRONIC_ADDRESS ON ELECTRONIC_ADDRESS (AGENT_ID)
CREATE UNIQUE INDEX PKEY_ELECTRONIC_ADDRESS ON ELECTRONIC_ADDRESS (AGENT_ID, ADDRESS_TYPE, ADDRESS)
CREATE UNIQUE INDEX XPKFLUID_CONTAINER_HISTORY ON FLUID_CONTAINER_HISTORY (CONTAINER_ID, CHECKED_DATE)
CREATE INDEX XIF618FLUID_CONTAINER_HISTORY ON FLUID_CONTAINER_HISTORY (CONTAINER_ID)
CREATE UNIQUE INDEX XPKGROUP_MEMBER ON GROUP_MEMBER (GROUP_AGENT_ID, MEMBER_AGENT_ID)
CREATE INDEX XIF529GROUP_MEMBER ON GROUP_MEMBER (GROUP_AGENT_ID)
CREATE INDEX XIF588GROUP_MEMBER ON GROUP_MEMBER (MEMBER_AGENT_ID)
CREATE UNIQUE INDEX XPKIDENTIFICATION_TAXONOMY ON IDENTIFICATION_TAXONOMY (IDENTIFICATION_ID, VARIABLE, TAXON_NAME_ID)
CREATE INDEX XIF646IDENTIFICATION_TAXONOMY ON IDENTIFICATION_TAXONOMY (IDENTIFICATION_ID)
CREATE INDEX XIF650IDENTIFICATION_TAXONOMY ON IDENTIFICATION_TAXONOMY (TAXON_NAME_ID)
CREATE INDEX XIF54LOAN_ITEM ON LOAN_ITEM (TRANSACTION_ID)
CREATE UNIQUE INDEX PKEY_LOAN_ITEM ON LOAN_ITEM (TRANSACTION_ID, COLLECTION_OBJECT_ID)
CREATE INDEX XIF55LOAN_ITEM ON LOAN_ITEM (COLLECTION_OBJECT_ID)
CREATE INDEX XIF81LOAN_ITEM ON LOAN_ITEM (RECONCILED_BY_PERSON_ID)
CREATE INDEX XIF26AGENT_EXPEDITION ON PROJECT_AGENT (PROJECT_ID)
CREATE INDEX XIF597PROJECT_AGENT ON PROJECT_AGENT (AGENT_NAME_ID)
CREATE UNIQUE INDEX XPKPROJECT_PUBLICATION ON PROJECT_PUBLICATION (PROJECT_ID, PUBLICATION_ID)
CREATE INDEX XIF595PROJECT_PUBLICATION ON PROJECT_PUBLICATION (PROJECT_ID)
CREATE INDEX XIF596PROJECT_PUBLICATION ON PROJECT_PUBLICATION (PUBLICATION_ID)
CREATE UNIQUE INDEX XPKPROJECT_TRANS ON PROJECT_TRANS (PROJECT_ID, TRANSACTION_ID)
CREATE INDEX XIF593PROJECT_TRANS ON PROJECT_TRANS (PROJECT_ID)
CREATE INDEX XIF594PROJECT_TRANS ON PROJECT_TRANS (TRANSACTION_ID)
CREATE UNIQUE INDEX PKEY_PUBLICATION_AUTHOR ON PUBLICATION_AUTHOR_NAME (PUBLICATION_ID, AGENT_NAME_ID)
CREATE UNIQUE INDEX XAK1PUBLICATION_AUTHOR_NAME ON PUBLICATION_AUTHOR_NAME (AUTHOR_POSITION, PUBLICATION_ID)
CREATE INDEX XIF519PUBLICATION_AUTHOR_NAME ON PUBLICATION_AUTHOR_NAME (AGENT_NAME_ID)
CREATE INDEX XIF92PUBLICATION_AUTHOR ON PUBLICATION_AUTHOR_NAME (PUBLICATION_ID)
CREATE UNIQUE INDEX PKEY_SHIPMENT ON SHIPMENT (CONTAINER_ID)
CREATE INDEX TRANSACTION_ID_SHIPMENT ON SHIPMENT (TRANSACTION_ID)
CREATE UNIQUE INDEX PKEY_TAXON_RELATIONS ON TAXON_RELATIONS (TAXON_NAME_ID, RELATED_TAXON_NAME_ID, TAXON_RELATIONSHIP)
CREATE INDEX IF24_LEXICON_TERM_RELATION_TA ON TAXON_RELATIONS (RELATED_TAXON_NAME_ID, TAXON_NAME_ID)
CREATE INDEX XIF443TAXON_RELATIONS_TAXON_R ON TAXON_RELATIONS (TAXON_NAME_ID)
CREATE INDEX XIF444TAXON_RELATIONS_TAXON_R ON TAXON_RELATIONS (RELATED_TAXON_NAME_ID)


SELECT * FROM all_synonyms WHERE table_name IN (
'AGENT_RELATIONS',
'BIOL_INDIV_RELATIONS',
'COLLECTOR',
'COLL_OBJ_CONT_HIST',
'CONTAINER_HISTORY',
'ELECTRONIC_ADDRESS',
'FLUID_CONTAINER_HISTORY',
'GROUP_MEMBER',
'IDENTIFICATION_TAXONOMY',
'LOAN_ITEM',
'PROJECT_AGENT',
'PROJECT_PUBLICATION',
'PROJECT_TRANS',
'PUBLICATION_AUTHOR_NAME',
'SHIPMENT',
'TAXON_RELATIONS',
'VESSEL')
ORDER BY table_name;

CREATE PUBLIC SYNONYM AGENT_RELATIONS for AGENT_RELATIONS;
create public synonym BIOL_INDIV_RELATIONS for BIOL_INDIV_RELATIONS;
create public synonym COLLECTOR for COLLECTOR;
create public synonym COLL_OBJ_CONT_HIST for COLL_OBJ_CONT_HIST;
create public synonym CONTAINER_HISTORY for CONTAINER_HISTORY;
create public synonym ELECTRONIC_ADDRESS for ELECTRONIC_ADDRESS;
create public synonym FLUID_CONTAINER_HISTORY for FLUID_CONTAINER_HISTORY;
create public synonym GROUP_MEMBER for GROUP_MEMBER;
create public synonym IDENTIFICATION_TAXONOMY for IDENTIFICATION_TAXONOMY;
create public synonym LOAN_ITEM for LOAN_ITEM;
create public synonym PROJECT_AGENT for PROJECT_AGENT;
create public synonym PROJECT_PUBLICATION for PROJECT_PUBLICATION;
create public synonym PROJECT_TRANS for PROJECT_TRANS;
create public synonym PUBLICATION_AUTHOR_NAME for PUBLICATION_AUTHOR_NAME;
create public synonym SHIPMENT for SHIPMENT;
create public synonym TAXON_RELATIONS for TAXON_RELATIONS;
create public synonym VESSEL FOR VESSEL;

SELECT COUNT(*) || ': AGENT_RELATIONS' FROM AGENT_RELATIONS;
select count(*) || ': BIOL_INDIV_RELATIONS' from BIOL_INDIV_RELATIONS;
select count(*) || ': COLLECTOR' from COLLECTOR;
select count(*) || ': COLL_OBJ_CONT_HIST' from COLL_OBJ_CONT_HIST;
select count(*) || ': CONTAINER_HISTORY' from CONTAINER_HISTORY;
select count(*) || ': ELECTRONIC_ADDRESS' from ELECTRONIC_ADDRESS;
select count(*) || ': FLUID_CONTAINER_HISTORY' from FLUID_CONTAINER_HISTORY;
select count(*) || ': GROUP_MEMBER' from GROUP_MEMBER;
select count(*) || ': IDENTIFICATION_TAXONOMY' from IDENTIFICATION_TAXONOMY;
select count(*) || ': LOAN_ITEM' from LOAN_ITEM;
select count(*) || ': PROJECT_AGENT' from PROJECT_AGENT;
select count(*) || ': PROJECT_PUBLICATION' from PROJECT_PUBLICATION;
select count(*) || ': PROJECT_TRANS' from PROJECT_TRANS;
select count(*) || ': PUBLICATION_AUTHOR_NAME' from PUBLICATION_AUTHOR_NAME;
select count(*) || ': SHIPMENT' from SHIPMENT;
select count(*) || ': TAXON_RELATIONS' from TAXON_RELATIONS;
select count(*) || ': VESSEL' from VESSEL;

---------------------------------------------------------
43: AGENT_RELATIONS
2852: BIOL_INDIV_RELATIONS
842036: COLLECTOR
919713: COLL_OBJ_CONT_HIST
0: CONTAINER_HISTORY
134: ELECTRONIC_ADDRESS
353: FLUID_CONTAINER_HISTORY
196: GROUP_MEMBER
745564: IDENTIFICATION_TAXONOMY
702: LOAN_ITEM
156: PROJECT_AGENT
50: PROJECT_PUBLICATION
54: PROJECT_TRANS
4302: PUBLICATION_AUTHOR_NAME
58: SHIPMENT
759: TAXON_RELATIONS
0: VESSEL

SELECT MAX(AGENT_RELATIONS_ID) FROM AGENT_RELATIONS;
select max(BIOL_INDIV_RELATIONS_ID) from BIOL_INDIV_RELATIONS;
select max(COLLECTOR_ID) from COLLECTOR;
select max(COLL_OBJ_CONT_HIST_ID) from COLL_OBJ_CONT_HIST;
select max(CONTAINER_HISTORY_ID) from CONTAINER_HISTORY;
select max(ELECTRONIC_ADDRESS_ID) from ELECTRONIC_ADDRESS;
select max(FLUID_CONTAINER_HISTORY_ID) from FLUID_CONTAINER_HISTORY;
select max(GROUP_MEMBER_ID) from GROUP_MEMBER;
select max(IDENTIFICATION_TAXONOMY_ID) from IDENTIFICATION_TAXONOMY;
select max(LOAN_ITEM_ID) from LOAN_ITEM;
select max(PROJECT_AGENT_ID) from PROJECT_AGENT;
select max(PROJECT_PUBLICATION_ID) from PROJECT_PUBLICATION;
select max(PROJECT_TRANS_ID) from PROJECT_TRANS;
select max(PUBLICATION_AUTHOR_NAME_ID) from PUBLICATION_AUTHOR_NAME;
select max(SHIPMENT_ID) from SHIPMENT;
select max(TAXON_RELATIONS_ID) from TAXON_RELATIONS;
select max(VESSEL_ID) from VESSEL;


MAX(AGENT_RELATIONS_ID) 43
MAX(BIOL_INDIV_RELATIONS_ID) 2852
MAX(COLLECTOR_ID) 842036
MAX(COLL_OBJ_CONT_HIST_ID) 919713
MAX(CONTAINER_HISTORY_ID) 
MAX(ELECTRONIC_ADDRESS_ID) 134
MAX(FLUID_CONTAINER_HISTORY_ID) 353
MAX(GROUP_MEMBER_ID) 196
MAX(IDENTIFICATION_TAXONOMY_ID) 745564
MAX(LOAN_ITEM_ID) 702
MAX(PROJECT_AGENT_ID) 156
MAX(PROJECT_PUBLICATION_ID) 50
MAX(PROJECT_TRANS_ID) 54
MAX(PUBLICATION_AUTHOR_NAME_ID) 4302
MAX(SHIPMENT_ID) 58
MAX(TAXON_RELATIONS_ID) 759
MAX(VESSEL_ID) 

exp uam@mvzlprod file=agent_relations.dmp TABLES=agent_relations
exp uam@mvzlprod file=biol_indiv_relations.dmp tables=biol_indiv_relations
exp uam@mvzlprod file=collector.dmp tables=collector
exp uam@mvzlprod file=coll_obj_cont_hist.dmp tables=coll_obj_cont_hist
exp uam@mvzlprod file=container_history.dmp tables=container_history
exp uam@mvzlprod file=electronic_address.dmp tables=electronic_address
exp uam@mvzlprod file=fluid_container_history.dmp tables=fluid_container_history
exp uam@mvzlprod file=group_member.dmp tables=group_member
exp uam@mvzlprod file=identification_taxonomy.dmp tables=identification_taxonomy
exp uam@mvzlprod file=loan_item.dmp tables=loan_item
exp uam@mvzlprod file=project_agent.dmp tables=project_agent
exp uam@mvzlprod file=project_publication.dmp tables=project_publication
exp uam@mvzlprod file=project_trans.dmp tables=project_trans
exp uam@mvzlprod file=publication_author_name.dmp tables=publication_author_name
exp uam@mvzlprod file=shipment.dmp tables=shipment
exp uam@mvzlprod file=taxon_relations.dmp tables=taxon_relations
exp uam@mvzlprod file=vessel.dmp tables=vessel


---AGENT_RELATIONS

CREATE TABLE agent_relations_bak AS SELECT * FROM agent_relations;
CREATE SEQUENCE sq_agent_relations_id;

SELECT COUNT(*) FROM AGENT_RELATIONS;

drop table AGENT_RELATIONS cascade constraints;

create table AGENT_RELATIONS  (
	AGENT_RELATIONS_ID   NUMBER                          not null,
	AGENT_ID             NUMBER                          not null,
	RELATED_AGENT_ID     NUMBER                          not null,
	AGENT_RELATIONSHIP   VARCHAR2(18)                    not null);

INSERT INTO agent_relations (
	agent_relations_id, 
	agent_id, 
	related_agent_id,
	agent_relationship)
	SELECT
	    sq_agent_relations_id.nextval,
	    agent_id,
	    related_agent_id,
	    agent_relationship
	FROM agent_relations_bak;

alter table AGENT_RELATIONS
	add constraint PK_AGENT_RELATIONS primary key (AGENT_RELATIONS_ID);

create unique index IU_AGENT_RELATIONS_AID_RAID_AR on AGENT_RELATIONS (
	AGENT_ID,
	RELATED_AGENT_ID,
	AGENT_RELATIONSHIP);

create index IX_AGENT_RELATIONS_AID on AGENT_RELATIONS (AGENT_ID);

create index IX_AGENT_RELATIONS_RAID on AGENT_RELATIONS (RELATED_AGENT_ID);

alter table AGENT_RELATIONS
	add constraint FK_AGENTRELATIONS_AGENT foreign key (AGENT_ID)
	  references AGENT (AGENT_ID);

alter table AGENT_RELATIONS
	add constraint FK_AGENTRELATIONS_AGENT_RANID foreign key (RELATED_AGENT_ID)
	  references AGENT (AGENT_ID);

---BIOL_INDIV_RELATIONS
create table BIOL_INDIV_RELATIONS_BAK as select * from BIOL_INDIV_RELATIONS;
create sequence SQ_BIOL_INDIV_RELATIONS_ID;

SELECT COUNT(*) FROM BIOL_INDIV_RELATIONS;

drop table BIOL_INDIV_RELATIONS cascade constraints;

create table BIOL_INDIV_RELATIONS  (
	BIOL_INDIV_RELATIONS_ID  NUMBER                          not null,
	COLLECTION_OBJECT_ID     NUMBER                          not null,
	RELATED_COLL_OBJECT_ID   NUMBER                          not null,
	BIOL_INDIV_RELATIONSHIP  VARCHAR2(18)                    not null);

insert into BIOL_INDIV_RELATIONS (
	BIOL_INDIV_RELATIONS_ID,
	COLLECTION_OBJECT_ID,
	RELATED_COLL_OBJECT_ID,
	BIOL_INDIV_RELATIONSHIP)
	select
	    SQ_BIOL_INDIV_RELATIONS_ID.nextval,
	    COLLECTION_OBJECT_ID,
	    RELATED_COLL_OBJECT_ID,
	    BIOL_INDIV_RELATIONSHIP
	from BIOL_INDIV_RELATIONS_BAK;

alter table BIOL_INDIV_RELATIONS
	add constraint PK_BIOL_INDIV_RELATIONS primary key (BIOL_INDIV_RELATIONS_ID);

create unique index IU_BIOL_IND_REL_COID_RCOID_BIR on BIOL_INDIV_RELATIONS (
	COLLECTION_OBJECT_ID,
	RELATED_COLL_OBJECT_ID,
	BIOL_INDIV_RELATIONS_ID);

create index IX_BIOL_IND_REL_RCOID on BIOL_INDIV_RELATIONS (RELATED_COLL_OBJECT_ID);

alter table BIOL_INDIV_RELATIONS
	add constraint FK_BIOLINDIVRELN_CATITEM_COID foreign key (COLLECTION_OBJECT_ID)
	  references CATALOGED_ITEM (COLLECTION_OBJECT_ID);

alter table BIOL_INDIV_RELATIONS
	add constraint FK_BIOLINDIVRELN_CATITEM_RCOID foreign key (RELATED_COLL_OBJECT_ID)
	  references CATALOGED_ITEM (COLLECTION_OBJECT_ID);

---COLLECTOR
create table COLLECTOR_BAK as select * from COLLECTOR;
create sequence SQ_COLLECTOR_ID;

SELECT COUNT(*) FROM COLLECTOR;

drop table COLLECTOR cascade constraints;

create table COLLECTOR  (
	COLLECTOR_ID         NUMBER                          not null,
	COLLECTION_OBJECT_ID NUMBER                          not null,
	AGENT_ID             NUMBER                          not null,
	COLLECTOR_ROLE       CHAR                            not null,
	COLL_NUM_PREFIX      VARCHAR2(20),
	COLL_NUM             NUMBER(15),
	COLL_NUM_SUFFIX      VARCHAR2(9),
	COLL_ORDER           NUMBER                          not null);

insert into COLLECTOR (
	COLLECTOR_ID,
	COLLECTION_OBJECT_ID,
	AGENT_ID,
	COLLECTOR_ROLE,
	COLL_NUM_PREFIX,
	COLL_NUM,
	COLL_NUM_SUFFIX,
	COLL_ORDER)
	select 
	    SQ_COLLECTOR_ID.nextval,
	    COLLECTION_OBJECT_ID,
	    AGENT_ID,
	    COLLECTOR_ROLE,
	    COLL_NUM_PREFIX,
	    COLL_NUM,
	    COLL_NUM_SUFFIX,
	    COLL_ORDER
	from COLLECTOR_BAK;

alter table COLLECTOR
	add constraint CK_COLLECTOR_COLLECTOR_ROLE check (COLLECTOR_ROLE in ('c','p'));

alter table COLLECTOR
	add constraint PK_COLLECTOR primary key (COLLECTOR_ID);

create unique index IU_COLLECTOR_COID_AID_ROLE on COLLECTOR (
	COLLECTION_OBJECT_ID,
	AGENT_ID,
	COLLECTOR_ROLE);

create unique index IX_COLLECTOR_COID_ORDER_ROLE on COLLECTOR (
	COLLECTION_OBJECT_ID,
	COLL_ORDER,
	COLLECTOR_ROLE);

create index IX_COLLECTOR_COLLNUM on COLLECTOR (COLL_NUM);

create index IX_COLLECTOR_ROLE on COLLECTOR (COLLECTOR_ROLE);

create index IX_COLLECTOR_COID on COLLECTOR (COLLECTION_OBJECT_ID);

create index IX_COLLECTOR_AID on COLLECTOR (AGENT_ID);

alter table COLLECTOR
	add constraint FK_COLLECTOR_AGENT foreign key (AGENT_ID)
	  references AGENT (AGENT_ID);

alter table COLLECTOR
	add constraint FK_COLLECTOR_CATITEM foreign key (COLLECTION_OBJECT_ID)
	  references CATALOGED_ITEM (COLLECTION_OBJECT_ID);

---COLL_OBJ_CONT_HIST
create table COLL_OBJ_CONT_HIST_BAK as select * from COLL_OBJ_CONT_HIST;
create sequence SQ_COLL_OBJ_CONT_HIST_ID;

SELECT COUNT(*) FROM COLL_OBJ_CONT_HIST;

drop table COLL_OBJ_CONT_HIST cascade constraints;

create table COLL_OBJ_CONT_HIST  (
	COLL_OBJ_CONT_HIST_ID    NUMBER                          NOT NULL,
	COLLECTION_OBJECT_ID     NUMBER                          NOT NULL,
	CONTAINER_ID         	 NUMBER                          NOT NULL,
	INSTALLED_DATE           DATE                            NOT NULL,
	CURRENT_CONTAINER_FG     NUMBER                          NOT NULL);

insert into COLL_OBJ_CONT_HIST (
	COLL_OBJ_CONT_HIST_ID,
	COLLECTION_OBJECT_ID,
	CONTAINER_ID,
	INSTALLED_DATE,
	CURRENT_CONTAINER_FG)
	select 
	    SQ_COLL_OBJ_CONT_HIST_ID.nextval,
	    COLLECTION_OBJECT_ID,
	    CONTAINER_ID,
	    INSTALLED_DATE,
	    CURRENT_CONTAINER_FG
	from COLL_OBJ_CONT_HIST_BAK;

alter table COLL_OBJ_CONT_HIST
	add constraint PK_COLL_OBJ_CONT_HIST primary key (COLL_OBJ_CONT_HIST_ID);

create unique index IU_CO_CONT_HIST_DATE_CID_COID on COLL_OBJ_CONT_HIST (
	INSTALLED_DATE,
	CONTAINER_ID,
	COLLECTION_OBJECT_ID);

create index IX_CO_CONT_HIST_COID on COLL_OBJ_CONT_HIST (COLLECTION_OBJECT_ID);

create index IX_CO_CONT_HIST_CONTAINERID on COLL_OBJ_CONT_HIST (CONTAINER_ID);

alter table COLL_OBJ_CONT_HIST
	add constraint FK_COLLOBJCONTHIST_COLLOBJ foreign key (COLLECTION_OBJECT_ID)
	  references COLL_OBJECT (COLLECTION_OBJECT_ID);

alter table COLL_OBJ_CONT_HIST
	add constraint FK_COLLOBJCONTHIST_CONTAINER foreign key (CONTAINER_ID)
	  references CONTAINER (CONTAINER_ID);


---CONTAINER_HISTORY
create table CONTAINER_HISTORY_BAK as select * from CONTAINER_HISTORY;
create sequence SQ_CONTAINER_HISTORY_ID;

SELECT COUNT(*) FROM CONTAINER_HISTORY;

drop table CONTAINER_HISTORY cascade constraints;

create table CONTAINER_HISTORY  (
	CONTAINER_HISTORY_ID NUMBER                          not null,
	CONTAINER_ID         NUMBER                          not null,
	PARENT_CONTAINER_ID  NUMBER                          not null,
	INSTALL_DATE         DATE);

insert into CONTAINER_HISTORY (
	CONTAINER_HISTORY_ID,
	CONTAINER_ID,
	PARENT_CONTAINER_ID,
	INSTALL_DATE)
	select
	    SQ_CONTAINER_HISTORY_ID.nextval,
	    CONTAINER_ID,
		PARENT_CONTAINER_ID,
		INSTALL_DATE
	from CONTAINER_HISTORY_BAK;
	
alter table CONTAINER_HISTORY
	add constraint PK_CONTAINER_HISTORY primary key (CONTAINER_HISTORY_ID);

create index IX_CONTAINER_HISTORY_CID on CONTAINER_HISTORY (CONTAINER_ID);

alter table CONTAINER_HISTORY
	add constraint FK_CONTAINHIST_CONTAINER_CID foreign key (CONTAINER_ID)
	  references CONTAINER (CONTAINER_ID);

alter table CONTAINER_HISTORY
	add constraint FK_CONTAINHIST_CONTAINER_PCID foreign key (PARENT_CONTAINER_ID)
	  references CONTAINER (CONTAINER_ID);


---ELECTRONIC_ADDRESS
create table ELECTRONIC_ADDRESS_BAK as select * from ELECTRONIC_ADDRESS;
create sequence SQ_ELECTRONIC_ADDRESS_ID;

SELECT COUNT(*) FROM ELECTRONIC_ADDRESS;

drop table ELECTRONIC_ADDRESS cascade constraints;

create table ELECTRONIC_ADDRESS  (
	ELECTRONIC_ADDRESS_ID    NUMBER                          not null,
	AGENT_ID                 NUMBER                          not null,
	ADDRESS_TYPE         	 VARCHAR2(30)                    not null,
	ADDRESS              	 VARCHAR2(255)                   not null);

insert into ELECTRONIC_ADDRESS (
	ELECTRONIC_ADDRESS_ID,
	AGENT_ID,
	ADDRESS_TYPE,
	ADDRESS)
	select
	    SQ_ELECTRONIC_ADDRESS_ID.nextval,
	    AGENT_ID,
	    ADDRESS_TYPE,
	    ADDRESS
	from ELECTRONIC_ADDRESS_BAK;

alter table ELECTRONIC_ADDRESS
	add constraint PK_ELECTRONIC_ADDRESS primary key (ELECTRONIC_ADDRESS_ID);

create unique index IU_ELEC_ADDR_AID_TYPE_ADDR on ELECTRONIC_ADDRESS (
	AGENT_ID,
	ADDRESS_TYPE,
	ADDRESS);

create index IX_ELEC_ADDR_AID on ELECTRONIC_ADDRESS (AGENT_ID);

--!!!ORA-02298: cannot validate (UAM.FK_ELECTRONICADDR_AGENT) - parent keys not found
alter table ELECTRONIC_ADDRESS
	add constraint FK_ELECTRONICADDR_AGENT foreign key (AGENT_ID)
	  references AGENT (AGENT_ID);

---FLUID_CONTAINER_HISTORY
create table FLUID_CONTAINER_HISTORY_BAK as select * from FLUID_CONTAINER_HISTORY;
create sequence SQ_FLUID_CONTAINER_HISTORY_ID;

SELECT COUNT(*) FROM FLUID_CONTAINER_HISTORY;

drop table FLUID_CONTAINER_HISTORY cascade constraints;

create table FLUID_CONTAINER_HISTORY  (
	FLUID_CONTAINER_HISTORY_ID NUMBER                          not null,
	CONTAINER_ID         NUMBER                          not null,
	CHECKED_DATE         DATE                            not null,
	FLUID_TYPE           VARCHAR2(30)                    not null,
	CONCENTRATION        NUMBER(2,2)                     not null,
	FLUID_REMARKS        VARCHAR2(255));

insert into FLUID_CONTAINER_HISTORY (
	FLUID_CONTAINER_HISTORY_ID,
	CONTAINER_ID,
	CHECKED_DATE,
	FLUID_TYPE,
	CONCENTRATION,
	FLUID_REMARKS)
	select
	    SQ_FLUID_CONTAINER_HISTORY_ID.nextval,
	    CONTAINER_ID,
	    CHECKED_DATE,
	    FLUID_TYPE,
	    CONCENTRATION,
	    FLUID_REMARKS
	from FLUID_CONTAINER_HISTORY_BAK;

alter table FLUID_CONTAINER_HISTORY
	add constraint PK_FLUID_CONTAINER_HISTORY primary key (FLUID_CONTAINER_HISTORY_ID);

create unique index IU_FLUID_CONT_HIST_CID_DATE on FLUID_CONTAINER_HISTORY (
	CONTAINER_ID,
	CHECKED_DATE);

create index IX_FLUID_CONT_HISTY_CID on FLUID_CONTAINER_HISTORY (CONTAINER_ID);

--!!ORA-02298: cannot validate (UAM.FK_FLUIDCONTHIST_CONTAINER) - parent keys not found
alter table FLUID_CONTAINER_HISTORY
	add constraint FK_FLUIDCONTHIST_CONTAINER foreign key (CONTAINER_ID)
	  references CONTAINER (CONTAINER_ID);

---GROUP_MEMBER
create table GROUP_MEMBER_BAK as select * from GROUP_MEMBER;
create sequence SQ_GROUP_MEMBER_ID;

SELECT COUNT(*) FROM GROUP_MEMBER;

drop table GROUP_MEMBER cascade constraints;

create table GROUP_MEMBER  (
	GROUP_MEMBER_ID      NUMBER                          not null,
	GROUP_AGENT_ID       NUMBER                          not null,
	MEMBER_AGENT_ID      NUMBER                          not null,
	MEMBER_ORDER         NUMBER                          not null);

insert into GROUP_MEMBER (
	GROUP_MEMBER_ID,
	GROUP_AGENT_ID,
	MEMBER_AGENT_ID,
	MEMBER_ORDER)
	select 
	    SQ_GROUP_MEMBER_ID.nextval,
	    GROUP_AGENT_ID,
	    MEMBER_AGENT_ID,
	    MEMBER_ORDER
	from GROUP_MEMBER_BAK;
	
alter table GROUP_MEMBER
	add constraint PK_GROUP_MEMBER primary key (GROUP_MEMBER_ID);

create unique index IU_GROUP_MEMBER_GAID_MAID on GROUP_MEMBER (
	GROUP_AGENT_ID,
	MEMBER_AGENT_ID);

create index IX_GROUP_MEMBER_GAID on GROUP_MEMBER (GROUP_AGENT_ID);

create index IX_GROUP_MEMBER_MAID on GROUP_MEMBER (MEMBER_AGENT_ID);

--!!ORA-02298: cannot validate (UAM.FK_GROUPMEMBER_AGENT_GROUP) - parent keys not found
alter table GROUP_MEMBER
	add constraint FK_GROUPMEMBER_AGENT_GROUP foreign key (GROUP_AGENT_ID)
	  references AGENT (AGENT_ID);

alter table GROUP_MEMBER
	add constraint FK_GROUPMEMBER_AGENT_MEMBER foreign key (MEMBER_AGENT_ID)
	  references AGENT (AGENT_ID);

---IDENTIFICATION_TAXONOMY
create table IDENTIFICATION_TAXONOMY_BAK as select * from IDENTIFICATION_TAXONOMY;
create sequence SQ_IDENTIFICATION_TAXONOMY_ID;

SELECT COUNT(*) FROM IDENTIFICATION_TAXONOMY;

drop table IDENTIFICATION_TAXONOMY cascade constraints;

create table IDENTIFICATION_TAXONOMY  (
	IDENTIFICATION_TAXONOMY_ID     NUMBER                          not null,
	IDENTIFICATION_ID              NUMBER                          not null,
	TAXON_NAME_ID                  NUMBER                          not null,
	VARIABLE                       CHAR);

insert into IDENTIFICATION_TAXONOMY (
	IDENTIFICATION_TAXONOMY_ID,
	IDENTIFICATION_ID,
	TAXON_NAME_ID,
	VARIABLE)
	select
	    SQ_IDENTIFICATION_TAXONOMY_ID.nextval,
	    IDENTIFICATION_ID,
	    TAXON_NAME_ID,
	    VARIABLE
	from IDENTIFICATION_TAXONOMY_BAK;

alter table IDENTIFICATION_TAXONOMY
	add constraint PK_IDENTIFICATION_TAXONOMY primary key (IDENTIFICATION_TAXONOMY_ID);

create index IX_ID_TAXONOMY_IDID on IDENTIFICATION_TAXONOMY (IDENTIFICATION_ID);

create index IX_ID_TAXONOMY_TNID on IDENTIFICATION_TAXONOMY (TAXON_NAME_ID);

create unique index IX_ID_TAXONOMY_IDID_VAR_TNID on IDENTIFICATION_TAXONOMY (
	IDENTIFICATION_ID,
	VARIABLE,
	TAXON_NAME_ID);

alter table IDENTIFICATION_TAXONOMY
	add constraint FK_IDTAXONOMY_IDENTIFICATION foreign key (IDENTIFICATION_ID)
	  references IDENTIFICATION (IDENTIFICATION_ID);

alter table IDENTIFICATION_TAXONOMY
	add constraint FK_IDTAXONOMY_TAXONOMY foreign key (TAXON_NAME_ID)
	  references TAXONOMY (TAXON_NAME_ID);

---LOAN_ITEM
create table LOAN_ITEM_BAK as select * from LOAN_ITEM;
create sequence SQ_LOAN_ITEM_ID;

SELECT COUNT(*) FROM LOAN_ITEM;

drop table LOAN_ITEM cascade constraints;

create table LOAN_ITEM  (
	LOAN_ITEM_ID                NUMBER                          not null,
	TRANSACTION_ID              NUMBER                          not null,
	COLLECTION_OBJECT_ID        NUMBER                          not null,
	RECONCILED_BY_PERSON_ID     NUMBER                          not null,
	RECONCILED_DATE             DATE,
	ITEM_DESCR                  VARCHAR2(127)                   not null,
	ITEM_INSTRUCTIONS           VARCHAR2(255),
	LOAN_ITEM_REMARKS           VARCHAR2(255));

insert into LOAN_ITEM (
	LOAN_ITEM_ID,
	TRANSACTION_ID,
	COLLECTION_OBJECT_ID,
	RECONCILED_BY_PERSON_ID,
	RECONCILED_DATE,
	ITEM_DESCR,
	ITEM_INSTRUCTIONS,
	LOAN_ITEM_REMARKS)
	select
	    SQ_LOAN_ITEM_ID.nextval,
	    TRANSACTION_ID,
	    COLLECTION_OBJECT_ID,
	    RECONCILED_BY_PERSON_ID,
	    RECONCILED_DATE,
	    ITEM_DESCR,
	    ITEM_INSTRUCTIONS,
	    LOAN_ITEM_REMARKS
	from LOAN_ITEM_BAK;

alter table LOAN_ITEM
	add constraint PK_LOAN_ITEM primary key (LOAN_ITEM_ID);

create unique index IU_LOAN_ITEM_TID_COID on LOAN_ITEM (
	TRANSACTION_ID,
	COLLECTION_OBJECT_ID);

create index IX_LOAN_ITEM_TID on LOAN_ITEM (TRANSACTION_ID);

create index IX_LOAN_ITEM_COID on LOAN_ITEM (COLLECTION_OBJECT_ID);

create index IX_LOAN_ITEM_RECONBYPID on LOAN_ITEM (RECONCILED_BY_PERSON_ID);

alter table LOAN_ITEM
	add constraint FK_LOANITEM_AGENT foreign key (RECONCILED_BY_PERSON_ID)
	  references AGENT (AGENT_ID);

--!!ORA-02298: cannot validate (UAM.FK_LOANITEM_COLLOBJECT) - parent keys not found
alter table LOAN_ITEM
	add constraint FK_LOANITEM_COLLOBJECT foreign key (COLLECTION_OBJECT_ID)
	  references COLL_OBJECT (COLLECTION_OBJECT_ID);

--!!ORA-02270: no matching unique or primary key for this column-list
alter table LOAN_ITEM
	add constraint FK_LOANITEM_LOAN foreign key (TRANSACTION_ID)
	  references LOAN (TRANSACTION_ID);

---PROJECT_AGENT
create table PROJECT_AGENT_BAK as select * from PROJECT_AGENT;
create sequence SQ_PROJECT_AGENT_ID;

select count(*) from PROJECT_AGENT;

drop table PROJECT_AGENT cascade constraints;

create table PROJECT_AGENT  (
	PROJECT_AGENT_ID      NUMBER                          not null,
	PROJECT_ID            NUMBER                          not null,
	AGENT_NAME_ID         NUMBER                          not null,
	PROJECT_AGENT_ROLE    VARCHAR2(25)                    not null,
	PROJECT_AGENT_REMARKS VARCHAR2(255),
	AGENT_POSITION        NUMBER                          not null);

insert into PROJECT_AGENT (
    PROJECT_AGENT_ID,
	PROJECT_ID,
	AGENT_NAME_ID,
	PROJECT_AGENT_ROLE,
	PROJECT_AGENT_REMARKS,
	AGENT_POSITION)
	select
	    SQ_PROJECT_AGENT_ID.nextval,
    	PROJECT_ID,
		AGENT_NAME_ID,
		PROJECT_AGENT_ROLE,
		PROJECT_AGENT_REMARKS,
		AGENT_POSITION
	from PROJECT_AGENT_BAK;

alter table PROJECT_AGENT
	add constraint PK_PROJECT_AGENT primary key (PROJECT_AGENT_ID);

create unique index IU_PROJECT_AGENT_PID_ANID_ROLE on PROJECT_AGENT (
	PROJECT_ID,
	AGENT_NAME_ID,
	PROJECT_AGENT_ROLE);

create index IX_PROJECT_AGENT_ANID on PROJECT_AGENT (AGENT_NAME_ID);

create index IX_PROJECT_AGENT_PID on PROJECT_AGENT (PROJECT_ID);

--!!ORA-02298: cannot validate (UAM.FK_PROJECTAGENT_AGENTNAME) - parent keys not found
alter table PROJECT_AGENT
	add constraint FK_PROJECTAGENT_AGENTNAME foreign key (AGENT_NAME_ID)
	  references AGENT_NAME (AGENT_NAME_ID);

alter table PROJECT_AGENT
	add constraint FK_PROJECTAGENT_PROJECT foreign key (PROJECT_ID)
	  references PROJECT (PROJECT_ID);

---PROJECT_PUBLICATION
create table PROJECT_PUBLICATION_BAK as select * from PROJECT_PUBLICATION;
create sequence SQ_PROJECT_PUBLICATION_ID;

select count(*) from PROJECT_PUBLICATION;

drop table PROJECT_PUBLICATION cascade constraints;

create table PROJECT_PUBLICATION  (
	PROJECT_PUBLICATION_ID      NUMBER(6)                       not null,
	PROJECT_ID                  NUMBER                          not null,
	PUBLICATION_ID              NUMBER                          not null,
	PROJECT_PUBLICATION_REMARKS VARCHAR2(255));

insert into PROJECT_PUBLICATION (
	PROJECT_PUBLICATION_ID,
	PROJECT_ID,
	PUBLICATION_ID,
	PROJECT_PUBLICATION_REMARKS)
	select 
	    SQ_PROJECT_PUBLICATION_ID.nextval,
        PROJECT_ID,
    	PUBLICATION_ID,
		PROJECT_PUBLICATION_REMARKS
	from PROJECT_PUBLICATION_BAK;

alter table PROJECT_PUBLICATION
	add constraint PK_PROJECT_PUBLICATION primary key (PROJECT_PUBLICATION_ID);

create unique index IU_PROJECT_PUB_PROJID_PUBID on PROJECT_PUBLICATION (
	PROJECT_ID,
	PUBLICATION_ID);

create index IX_PROJECT_PUB_PROJID on PROJECT_PUBLICATION (PROJECT_ID);

create index IX_PROJECT_PUB_PUBID on PROJECT_PUBLICATION (PUBLICATION_ID);

alter table PROJECT_PUBLICATION
	add constraint FK_PROJECTPUB_PROJECT foreign key (PROJECT_ID)
	  references PROJECT (PROJECT_ID);

alter table PROJECT_PUBLICATION
	add constraint FK_PROJECTPUB_PUBLICATION foreign key (PUBLICATION_ID)
	  references PUBLICATION (PUBLICATION_ID);

---PROJECT_TRANS
create table PROJECT_TRANS_BAK as select * from PROJECT_TRANS;
create sequence SQ_PROJECT_TRANS_ID;

select count(*) from PROJECT_TRANS;

drop table PROJECT_TRANS cascade constraints;

create table PROJECT_TRANS  (
	PROJECT_TRANS_ID      NUMBER                          not null,
	PROJECT_ID            NUMBER                          not null,
	TRANSACTION_ID        NUMBER                          not null,
	PROJECT_TRANS_REMARKS VARCHAR2(255));

insert into PROJECT_TRANS (
	PROJECT_TRANS_ID,
	PROJECT_ID,
	TRANSACTION_ID,
	PROJECT_TRANS_REMARKS)
	select
	    SQ_PROJECT_TRANS_ID.nextval,
    	PROJECT_ID,
		TRANSACTION_ID,
		PROJECT_TRANS_REMARKS
	from PROJECT_TRANS_BAK;

alter table PROJECT_TRANS
	add constraint PK_PROJECT_TRANS primary key (PROJECT_TRANS_ID);

create unique index IU_PROJECT_TRANS_PROJID_TID on PROJECT_TRANS (
	PROJECT_ID,
	TRANSACTION_ID);

create index IX_PROJECT_TRANS_PROJID on PROJECT_TRANS (PROJECT_ID);

create index IX_PROJECT_TRANS_TID on PROJECT_TRANS (TRANSACTION_ID);

alter table PROJECT_TRANS
	add constraint FK_PROJECTTRANS_PROJECT foreign key (PROJECT_ID)
	  references PROJECT (PROJECT_ID);

alter table PROJECT_TRANS
	add constraint FK_PROJECTTRANS_TRANS foreign key (TRANSACTION_ID)
	  references TRANS (TRANSACTION_ID);


---PUBLICATION_AUTHOR_NAME
create table PUBLICATION_AUTHOR_NAME_BAK as select * from PUBLICATION_AUTHOR_NAME;
create sequence SQ_PUBLICATION_AUTHOR_NAME_ID;

select count(*) from PUBLICATION_AUTHOR_NAME;

drop table PUBLICATION_AUTHOR_NAME cascade constraints;

create table PUBLICATION_AUTHOR_NAME  (
	PUBLICATION_AUTHOR_NAME_ID NUMBER                          not null,
	PUBLICATION_ID             NUMBER                          not null,
	AGENT_NAME_ID              NUMBER                          not null,
	AUTHOR_POSITION            NUMBER                          not null);

insert into PUBLICATION_AUTHOR_NAME (
	PUBLICATION_AUTHOR_NAME_ID,
	PUBLICATION_ID,
	AGENT_NAME_ID,
	AUTHOR_POSITION)
	select
	    SQ_PUBLICATION_AUTHOR_NAME_ID.nextval,
	    PUBLICATION_ID,
	    AGENT_NAME_ID,
	    AUTHOR_POSITION
	from PUBLICATION_AUTHOR_NAME_BAK;

alter table PUBLICATION_AUTHOR_NAME
	add constraint PK_PUBLICATION_AUTHOR_NAME primary key (PUBLICATION_AUTHOR_NAME_ID);

create unique index IU_PUB_AUTH_NAME_PID_ANID on PUBLICATION_AUTHOR_NAME (
	PUBLICATION_ID,
	AGENT_NAME_ID);

create unique index IU_PUB_AUTH_NAME_POSITION_PID on PUBLICATION_AUTHOR_NAME (
	AUTHOR_POSITION,
	PUBLICATION_ID);

create index IX_PUB_AUTH_NAME_ANID on PUBLICATION_AUTHOR_NAME (AGENT_NAME_ID);

create index IX_PUB_AUTH_NAME_PID on PUBLICATION_AUTHOR_NAME (PUBLICATION_ID);

--!!ORA-02298: cannot validate (UAM.FK_PUBAUTHNAME_AGENTNAME) - parent keys not found
alter table PUBLICATION_AUTHOR_NAME
	add constraint FK_PUBAUTHNAME_AGENTNAME foreign key (AGENT_NAME_ID)
	  references AGENT_NAME (AGENT_NAME_ID);

alter table PUBLICATION_AUTHOR_NAME
	add constraint FK_PUBAUTHNAME_PUBLICATION foreign key (PUBLICATION_ID)
	  references PUBLICATION (PUBLICATION_ID);


---SHIPMENT
create table SHIPMENT_BAK as select * from SHIPMENT;
create sequence SQ_SHIPMENT_ID;

select count(*) from SHIPMENT;

drop table SHIPMENT cascade constraints;

create table SHIPMENT  (
	SHIPMENT_ID               NUMBER                          not null,
	CONTAINER_ID              NUMBER,
	TRANSACTION_ID            NUMBER                          not null,
	PACKED_BY_AGENT_ID        NUMBER                          not null,
	SHIPPED_CARRIER_METHOD    VARCHAR2(25)                    not null,
	CARRIERS_TRACKING_NUMBER  VARCHAR2(20),
	SHIPPED_DATE              DATE,
	PACKAGE_WEIGHT            VARCHAR2(10),
	HAZMAT_FG                 NUMBER(1)                       not null,
	INSURED_FOR_INSURED_VALUE NUMBER,
	SHIPMENT_REMARKS          VARCHAR2(255),
	CONTENTS                  VARCHAR2(255),
	FOREIGN_SHIPMENT_FG       NUMBER(1)                       not null,
	SHIPPED_TO_ADDR_ID        NUMBER                          not null,
	SHIPPED_FROM_ADDR_ID      NUMBER                          not null);

insert into SHIPMENT (
	SHIPMENT_ID,
	CONTAINER_ID,
	TRANSACTION_ID,
	PACKED_BY_AGENT_ID,
	SHIPPED_CARRIER_METHOD,
	CARRIERS_TRACKING_NUMBER,
	SHIPPED_DATE,
	PACKAGE_WEIGHT,
	HAZMAT_FG,
	INSURED_FOR_INSURED_VALUE,
	SHIPMENT_REMARKS,
	CONTENTS,
	FOREIGN_SHIPMENT_FG,
	SHIPPED_TO_ADDR_ID,
	SHIPPED_FROM_ADDR_ID)
	select
	    SQ_SHIPMENT_ID.nextval,
	    CONTAINER_ID,
	    TRANSACTION_ID,
		PACKED_BY_AGENT_ID,
		SHIPPED_CARRIER_METHOD,
		CARRIERS_TRACKING_NUMBER,
		SHIPPED_DATE,
		PACKAGE_WEIGHT,
		HAZMAT_FG,
		INSURED_FOR_INSURED_VALUE,
		SHIPMENT_REMARKS,
		CONTENTS,
		FOREIGN_SHIPMENT_FG,
		SHIPPED_TO_ADDR_ID,
		SHIPPED_FROM_ADDR_ID
	from SHIPMENT_BAK;

alter table SHIPMENT
	add constraint PK_SHIPMENT primary key (SHIPMENT_ID);

create index IX_SHIPMENT_TRANSACTIONID on SHIPMENT (TRANSACTION_ID);

alter table SHIPMENT
	add constraint FK_SHIPMENT_ADDR_SHIPPEDFROM foreign key (SHIPPED_FROM_ADDR_ID)
	  references ADDR (ADDR_ID);

alter table SHIPMENT
	add constraint FK_SHIPMENT_ADDR_SHIPPEDTO foreign key (SHIPPED_TO_ADDR_ID)
	  references ADDR (ADDR_ID);

alter table SHIPMENT
	add constraint FK_SHIPMENT_AGENT foreign key (PACKED_BY_AGENT_ID)
	  references AGENT (AGENT_ID);

alter table SHIPMENT
	add constraint FK_SHIPMENT_CONTAINER foreign key (CONTAINER_ID)
	  references CONTAINER (CONTAINER_ID);

alter table SHIPMENT
	add constraint FK_SHIPMENT_TRANS foreign key (TRANSACTION_ID)
	  references TRANS (TRANSACTION_ID);

---TAXON_RELATIONS
create table TAXON_RELATIONS_BAK as select * from TAXON_RELATIONS;
create sequence SQ_TAXON_RELATIONS_ID;

select count(*) from TAXON_RELATIONS;

drop table TAXON_RELATIONS cascade constraints;

create table TAXON_RELATIONS  (
	TAXON_RELATIONS_ID    NUMBER                          not null,
	TAXON_NAME_ID         NUMBER                          not null,
	RELATED_TAXON_NAME_ID NUMBER                         not null,
	TAXON_RELATIONSHIP    VARCHAR2(30)                    not null,
	RELATION_AUTHORITY    VARCHAR2(45));

insert into TAXON_RELATIONS (
    TAXON_RELATIONS_ID,
	TAXON_NAME_ID,
	RELATED_TAXON_NAME_ID,
	TAXON_RELATIONSHIP,
	RELATION_AUTHORITY)
	select 
	    SQ_TAXON_RELATIONS_ID.nextval,
		TAXON_NAME_ID,
	    RELATED_TAXON_NAME_ID,
		TAXON_RELATIONSHIP,
		RELATION_AUTHORITY
	from TAXON_RELATIONS_BAK;

alter table TAXON_RELATIONS
	add constraint PK_TAXON_RELATIONS primary key (TAXON_RELATIONS_ID);

create unique index IU_TAXON_REL_TNID_RTNID_TREL on TAXON_RELATIONS (
	TAXON_NAME_ID,
	RELATED_TAXON_NAME_ID,
	TAXON_RELATIONSHIP);

create index IX_TAXON_REL_RTNID_TNID on TAXON_RELATIONS (
	RELATED_TAXON_NAME_ID,
	TAXON_NAME_ID);

create index IX_TAXON_REL_TNID on TAXON_RELATIONS (TAXON_NAME_ID);

create index IX_TAXON_REL_RTNID on TAXON_RELATIONS (RELATED_TAXON_NAME_ID);

alter table TAXON_RELATIONS
	add constraint FK_TAXONRELN_TAXONOMY_RTNID foreign key (RELATED_TAXON_NAME_ID)
	  references TAXONOMY (TAXON_NAME_ID);

alter table TAXON_RELATIONS
	add constraint FK_TAXONRELN_TAXONOMY_TNID foreign key (TAXON_NAME_ID)
	  references TAXONOMY (TAXON_NAME_ID);


---VESSEL
create table VESSEL_BAK as select * from VESSEL;
create sequence SQ_VESSEL_ID;

select count(*) from VESSEL;

drop table VESSEL cascade constraints;

create table VESSEL  (
	VESSEL_ID            NUMBER                          not null,
	COLLECTING_EVENT_ID  NUMBER                          not null,
	VESSEL               VARCHAR2(255)                   not null,
	STATION_NAME         VARCHAR2(255),
	STATION_NUMBER       VARCHAR2(255));

insert into VESSEL (
	VESSEL_ID,
	COLLECTING_EVENT_ID,
	VESSEL,
	STATION_NAME,
	STATION_NUMBER)
	select
	    SQ_VESSEL_ID.nextval,
		COLLECTING_EVENT_ID,
	    VESSEL,
		STATION_NAME,
		STATION_NUMBER
	from VESSEL_BAK;

alter table VESSEL
	add constraint PK_VESSEL primary key (VESSEL_ID);

alter table VESSEL
	add constraint FK_VESSEL_COLLEVENT foreign key (COLLECTING_EVENT_ID)
	  references COLLECTING_EVENT (COLLECTING_EVENT_ID);

--CITATION -- forgot this one completely! argh
create table CITATION_BAK as select * from CITATION;
create sequence SQ_CITATION_ID;

select count(*) from CITATION;

drop table CITATION cascade constraints;

create table CITATION  (
   CITATION_ID          NUMBER                          not null,
   PUBLICATION_ID       NUMBER                          not null,
   COLLECTION_OBJECT_ID NUMBER                          not null,
   CITED_TAXON_NAME_ID  NUMBER,
   CIT_CURRENT_FG       NUMBER                          not null,
   OCCURS_PAGE_NUMBER   NUMBER,
   TYPE_STATUS          VARCHAR2(30),
   CITATION_REMARKS     VARCHAR2(255),
   CITATION_TEXT        VARCHAR2(255),
   REP_PUBLISHED_YEAR   NUMBER
);

INSERT INTO CITATION  (
   CITATION_ID,
   PUBLICATION_ID,
   COLLECTION_OBJECT_ID,
   CITED_TAXON_NAME_ID,
   CIT_CURRENT_FG,
   OCCURS_PAGE_NUMBER,
   TYPE_STATUS,
   CITATION_REMARKS,
   CITATION_TEXT,
   REP_PUBLISHED_YEAR)
   SELECT
       SQ_CITATION_ID.nextval,
       PUBLICATION_ID,
	   COLLECTION_OBJECT_ID,
	   CITED_TAXON_NAME_ID,
	   CIT_CURRENT_FG,
	   OCCURS_PAGE_NUMBER,
	   TYPE_STATUS,
	   CITATION_REMARKS,
	   CITATION_TEXT,
	   REP_PUBLISHED_YEAR
    FROM citation_bak;

alter table CITATION
   add constraint PK_CITATION primary key (CITATION_ID);

create unique index UI_CITATION_COID_PUBID on CITATION (
   COLLECTION_OBJECT_ID,
   PUBLICATION_ID
);

create index IX_CITATION_COID on CITATION (COLLECTION_OBJECT_ID);

create index IX_CITATION_CITEDTNID on CITATION (CITED_TAXON_NAME_ID);

create index IX_CITATION_PUBID on CITATION (PUBLICATION_ID);

alter table CITATION
   add constraint FK_CITATION_CATITEM foreign key (COLLECTION_OBJECT_ID)
      references CATALOGED_ITEM (COLLECTION_OBJECT_ID);

alter table CITATION
   add constraint FK_CITATION_PUBLICATION foreign key (PUBLICATION_ID)
      references PUBLICATION (PUBLICATION_ID);

alter table CITATION
   add constraint FK_CITATION_TAXONOMY foreign key (CITED_TAXON_NAME_ID)
      references TAXONOMY (TAXON_NAME_ID);
	  
--!! note: need TO MOVE INDEXES TO uam_idx_1
-- execute immediate doesn't seem to work. ??? have to run resulting output manually.
begin                                                                           
for i in (select index_name from user_indexes                                   
    where tablespace_name = 'UAM_DAT_1'                                         
    and index_name not like 'SYS%'                                              
) loop                                                                          
dbms_output.put_line ('alter index ' || i.index_name || ' rebuild tablespace uam_idx_1;');
--execute immediate 'alter index ' || i.index_name || 'rebuild tablespace uam_idx_1';
end loop;                                                                       
end;                                                                            
/


grant DELETE on AGENT_RELATIONS to MANAGE_AGENTS;
grant INSERT on AGENT_RELATIONS to MANAGE_AGENTS;
grant UPDATE on AGENT_RELATIONS to MANAGE_AGENTS;
grant DELETE on AGENT_RELATIONS to MVZ_PRODSUPPORT;
grant INSERT on AGENT_RELATIONS to MVZ_PRODSUPPORT;
grant SELECT on AGENT_RELATIONS to MVZ_PRODSUPPORT;
grant UPDATE on AGENT_RELATIONS to MVZ_PRODSUPPORT;
grant SELECT on AGENT_RELATIONS to PUBLIC;
grant SELECT on AGENT_RELATIONS to UAM_QUERY;
grant DELETE on AGENT_RELATIONS to UAM_UPDATE;
grant INSERT on AGENT_RELATIONS to UAM_UPDATE;
grant SELECT on AGENT_RELATIONS to UAM_UPDATE;
grant UPDATE on AGENT_RELATIONS to UAM_UPDATE;
grant DELETE on BIOL_INDIV_RELATIONS to MANAGE_SPECIMENS;
grant INSERT on BIOL_INDIV_RELATIONS to MANAGE_SPECIMENS;
grant UPDATE on BIOL_INDIV_RELATIONS to MANAGE_SPECIMENS;
grant DELETE on BIOL_INDIV_RELATIONS to MVZ_PRODSUPPORT;
grant INSERT on BIOL_INDIV_RELATIONS to MVZ_PRODSUPPORT;
grant SELECT on BIOL_INDIV_RELATIONS to MVZ_PRODSUPPORT;
grant UPDATE on BIOL_INDIV_RELATIONS to MVZ_PRODSUPPORT;
grant SELECT on BIOL_INDIV_RELATIONS to PUBLIC;
grant DELETE on BIOL_INDIV_RELATIONS to UAM_QUERY;
grant INSERT on BIOL_INDIV_RELATIONS to UAM_QUERY;
grant SELECT on BIOL_INDIV_RELATIONS to UAM_QUERY;
grant UPDATE on BIOL_INDIV_RELATIONS to UAM_QUERY;
grant DELETE on BIOL_INDIV_RELATIONS to UAM_UPDATE;
grant INSERT on BIOL_INDIV_RELATIONS to UAM_UPDATE;
grant SELECT on BIOL_INDIV_RELATIONS to UAM_UPDATE;
grant UPDATE on BIOL_INDIV_RELATIONS to UAM_UPDATE;
grant DELETE on COLLECTOR to MANAGE_SPECIMENS;
grant INSERT on COLLECTOR to MANAGE_SPECIMENS;
grant UPDATE on COLLECTOR to MANAGE_SPECIMENS;
grant DELETE on COLLECTOR to MVZ_PRODSUPPORT;
grant INSERT on COLLECTOR to MVZ_PRODSUPPORT;
grant SELECT on COLLECTOR to MVZ_PRODSUPPORT;
grant UPDATE on COLLECTOR to MVZ_PRODSUPPORT;
grant SELECT on COLLECTOR to PUBLIC;
grant SELECT on COLLECTOR to UAM_QUERY;
grant DELETE on COLLECTOR to UAM_UPDATE;
grant INSERT on COLLECTOR to UAM_UPDATE;
grant SELECT on COLLECTOR to UAM_UPDATE;
grant UPDATE on COLLECTOR to UAM_UPDATE;
grant DELETE on COLL_OBJ_CONT_HIST to MANAGE_SPECIMENS;
grant INSERT on COLL_OBJ_CONT_HIST to MANAGE_SPECIMENS;
grant UPDATE on COLL_OBJ_CONT_HIST to MANAGE_SPECIMENS;
grant DELETE on COLL_OBJ_CONT_HIST to MVZ_PRODSUPPORT;
grant INSERT on COLL_OBJ_CONT_HIST to MVZ_PRODSUPPORT;
grant SELECT on COLL_OBJ_CONT_HIST to MVZ_PRODSUPPORT;
grant UPDATE on COLL_OBJ_CONT_HIST to MVZ_PRODSUPPORT;
grant SELECT on COLL_OBJ_CONT_HIST to PUBLIC;
grant DELETE on COLL_OBJ_CONT_HIST to UAM_QUERY;
grant INSERT on COLL_OBJ_CONT_HIST to UAM_QUERY;
grant SELECT on COLL_OBJ_CONT_HIST to UAM_QUERY;
grant DELETE on COLL_OBJ_CONT_HIST to UAM_UPDATE;
grant INSERT on COLL_OBJ_CONT_HIST to UAM_UPDATE;
grant SELECT on COLL_OBJ_CONT_HIST to UAM_UPDATE;
grant UPDATE on COLL_OBJ_CONT_HIST to UAM_UPDATE;
grant ALTER on CONTAINER_HISTORY to MANAGE_CONTAINER;
grant DEBUG on CONTAINER_HISTORY to MANAGE_CONTAINER;
grant DELETE on CONTAINER_HISTORY to MANAGE_CONTAINER;
grant FLASHBACK on CONTAINER_HISTORY to MANAGE_CONTAINER;
grant INSERT on CONTAINER_HISTORY to MANAGE_CONTAINER;
grant ON COMMIT REFRESH on CONTAINER_HISTORY to MANAGE_CONTAINER;
grant QUERY REWRITE on CONTAINER_HISTORY to MANAGE_CONTAINER;
grant SELECT on CONTAINER_HISTORY to MANAGE_CONTAINER;
grant UPDATE on CONTAINER_HISTORY to MANAGE_CONTAINER;
grant DELETE on CONTAINER_HISTORY to MVZ_PRODSUPPORT;
grant INSERT on CONTAINER_HISTORY to MVZ_PRODSUPPORT;
grant SELECT on CONTAINER_HISTORY to MVZ_PRODSUPPORT;
grant UPDATE on CONTAINER_HISTORY to MVZ_PRODSUPPORT;
grant SELECT on CONTAINER_HISTORY to PUBLIC;
grant SELECT on CONTAINER_HISTORY to UAM_QUERY;
grant DELETE on CONTAINER_HISTORY to UAM_UPDATE;
grant INSERT on CONTAINER_HISTORY to UAM_UPDATE;
grant SELECT on CONTAINER_HISTORY to UAM_UPDATE;
grant UPDATE on CONTAINER_HISTORY to UAM_UPDATE;
grant DELETE on ELECTRONIC_ADDRESS to MANAGE_TRANSACTIONS;
grant INSERT on ELECTRONIC_ADDRESS to MANAGE_TRANSACTIONS;
grant UPDATE on ELECTRONIC_ADDRESS to MANAGE_TRANSACTIONS;
grant DELETE on ELECTRONIC_ADDRESS to MVZ_PRODSUPPORT;
grant INSERT on ELECTRONIC_ADDRESS to MVZ_PRODSUPPORT;
grant SELECT on ELECTRONIC_ADDRESS to MVZ_PRODSUPPORT;
grant UPDATE on ELECTRONIC_ADDRESS to MVZ_PRODSUPPORT;
grant SELECT on ELECTRONIC_ADDRESS to PUBLIC;
grant SELECT on ELECTRONIC_ADDRESS to UAM_QUERY;
grant DELETE on ELECTRONIC_ADDRESS to UAM_UPDATE;
grant INSERT on ELECTRONIC_ADDRESS to UAM_UPDATE;
grant SELECT on ELECTRONIC_ADDRESS to UAM_UPDATE;
grant UPDATE on ELECTRONIC_ADDRESS to UAM_UPDATE;
grant DELETE on FLUID_CONTAINER_HISTORY to MANAGE_CONTAINER;
grant INSERT on FLUID_CONTAINER_HISTORY to MANAGE_CONTAINER;
grant UPDATE on FLUID_CONTAINER_HISTORY to MANAGE_CONTAINER;
grant DELETE on FLUID_CONTAINER_HISTORY to MVZ_PRODSUPPORT;
grant INSERT on FLUID_CONTAINER_HISTORY to MVZ_PRODSUPPORT;
grant SELECT on FLUID_CONTAINER_HISTORY to MVZ_PRODSUPPORT;
grant UPDATE on FLUID_CONTAINER_HISTORY to MVZ_PRODSUPPORT;
grant SELECT on FLUID_CONTAINER_HISTORY to PUBLIC;
grant INSERT on FLUID_CONTAINER_HISTORY to UAM_QUERY;
grant SELECT on FLUID_CONTAINER_HISTORY to UAM_QUERY;
grant DELETE on FLUID_CONTAINER_HISTORY to UAM_UPDATE;
grant INSERT on FLUID_CONTAINER_HISTORY to UAM_UPDATE;
grant SELECT on FLUID_CONTAINER_HISTORY to UAM_UPDATE;
grant UPDATE on FLUID_CONTAINER_HISTORY to UAM_UPDATE;
grant DELETE on GROUP_MEMBER to MANAGE_AGENTS;
grant INSERT on GROUP_MEMBER to MANAGE_AGENTS;
grant UPDATE on GROUP_MEMBER to MANAGE_AGENTS;
grant DELETE on GROUP_MEMBER to MVZ_PRODSUPPORT;
grant INSERT on GROUP_MEMBER to MVZ_PRODSUPPORT;
grant SELECT on GROUP_MEMBER to MVZ_PRODSUPPORT;
grant UPDATE on GROUP_MEMBER to MVZ_PRODSUPPORT;
grant SELECT on GROUP_MEMBER to PUBLIC;
grant SELECT on GROUP_MEMBER to UAM_QUERY;
grant DELETE on GROUP_MEMBER to UAM_UPDATE;
grant INSERT on GROUP_MEMBER to UAM_UPDATE;
grant SELECT on GROUP_MEMBER to UAM_UPDATE;
grant UPDATE on GROUP_MEMBER to UAM_UPDATE;
grant DELETE on IDENTIFICATION_TAXONOMY to MANAGE_COLLECTION;
grant INSERT on IDENTIFICATION_TAXONOMY to MANAGE_SPECIMENS;
grant UPDATE on IDENTIFICATION_TAXONOMY to MANAGE_SPECIMENS;
grant DELETE on IDENTIFICATION_TAXONOMY to MVZ_PRODSUPPORT;
grant INSERT on IDENTIFICATION_TAXONOMY to MVZ_PRODSUPPORT;
grant SELECT on IDENTIFICATION_TAXONOMY to MVZ_PRODSUPPORT;
grant UPDATE on IDENTIFICATION_TAXONOMY to MVZ_PRODSUPPORT;
grant SELECT on IDENTIFICATION_TAXONOMY to PUBLIC;
grant SELECT on IDENTIFICATION_TAXONOMY to UAM_QUERY;
grant DELETE on IDENTIFICATION_TAXONOMY to UAM_UPDATE;
grant INSERT on IDENTIFICATION_TAXONOMY to UAM_UPDATE;
grant SELECT on IDENTIFICATION_TAXONOMY to UAM_UPDATE;
grant UPDATE on IDENTIFICATION_TAXONOMY to UAM_UPDATE;
grant DELETE on LOAN_ITEM to MANAGE_TRANSACTIONS;
grant INSERT on LOAN_ITEM to MANAGE_TRANSACTIONS;
grant UPDATE on LOAN_ITEM to MANAGE_TRANSACTIONS;
grant DELETE on LOAN_ITEM to MVZ_PRODSUPPORT;
grant INSERT on LOAN_ITEM to MVZ_PRODSUPPORT;
grant SELECT on LOAN_ITEM to MVZ_PRODSUPPORT;
grant UPDATE on LOAN_ITEM to MVZ_PRODSUPPORT;
grant SELECT on LOAN_ITEM to PUBLIC;
grant SELECT on LOAN_ITEM to UAM_QUERY;
grant DELETE on LOAN_ITEM to UAM_UPDATE;
grant INSERT on LOAN_ITEM to UAM_UPDATE;
grant SELECT on LOAN_ITEM to UAM_UPDATE;
grant UPDATE on LOAN_ITEM to UAM_UPDATE;
grant DELETE on PROJECT_AGENT to MANAGE_PUBLICATIONS;
grant INSERT on PROJECT_AGENT to MANAGE_PUBLICATIONS;
grant UPDATE on PROJECT_AGENT to MANAGE_PUBLICATIONS;
grant DELETE on PROJECT_AGENT to MANAGE_TRANSACTIONS;
grant INSERT on PROJECT_AGENT to MANAGE_TRANSACTIONS;
grant UPDATE on PROJECT_AGENT to MANAGE_TRANSACTIONS;
grant DELETE on PROJECT_AGENT to MVZ_PRODSUPPORT;
grant INSERT on PROJECT_AGENT to MVZ_PRODSUPPORT;
grant SELECT on PROJECT_AGENT to MVZ_PRODSUPPORT;
grant UPDATE on PROJECT_AGENT to MVZ_PRODSUPPORT;
grant SELECT on PROJECT_AGENT to PUBLIC;
grant SELECT on PROJECT_AGENT to UAM_QUERY;
grant DELETE on PROJECT_AGENT to UAM_UPDATE;
grant INSERT on PROJECT_AGENT to UAM_UPDATE;
grant SELECT on PROJECT_AGENT to UAM_UPDATE;
grant UPDATE on PROJECT_AGENT to UAM_UPDATE;
grant DELETE on PROJECT_PUBLICATION to MANAGE_PUBLICATIONS;
grant INSERT on PROJECT_PUBLICATION to MANAGE_PUBLICATIONS;
grant UPDATE on PROJECT_PUBLICATION to MANAGE_PUBLICATIONS;
grant DELETE on PROJECT_PUBLICATION to MANAGE_TRANSACTIONS;
grant INSERT on PROJECT_PUBLICATION to MANAGE_TRANSACTIONS;
grant UPDATE on PROJECT_PUBLICATION to MANAGE_TRANSACTIONS;
grant DELETE on PROJECT_PUBLICATION to MVZ_PRODSUPPORT;
grant INSERT on PROJECT_PUBLICATION to MVZ_PRODSUPPORT;
grant SELECT on PROJECT_PUBLICATION to MVZ_PRODSUPPORT;
grant UPDATE on PROJECT_PUBLICATION to MVZ_PRODSUPPORT;
grant SELECT on PROJECT_PUBLICATION to PUBLIC;
grant SELECT on PROJECT_PUBLICATION to UAM_QUERY;
grant DELETE on PROJECT_PUBLICATION to UAM_UPDATE;
grant INSERT on PROJECT_PUBLICATION to UAM_UPDATE;
grant SELECT on PROJECT_PUBLICATION to UAM_UPDATE;
grant UPDATE on PROJECT_PUBLICATION to UAM_UPDATE;
grant DELETE on PROJECT_TRANS to MANAGE_PUBLICATIONS;
grant INSERT on PROJECT_TRANS to MANAGE_PUBLICATIONS;
grant UPDATE on PROJECT_TRANS to MANAGE_PUBLICATIONS;
grant DELETE on PROJECT_TRANS to MVZ_PRODSUPPORT;
grant INSERT on PROJECT_TRANS to MVZ_PRODSUPPORT;
grant SELECT on PROJECT_TRANS to MVZ_PRODSUPPORT;
grant UPDATE on PROJECT_TRANS to MVZ_PRODSUPPORT;
grant SELECT on PROJECT_TRANS to PUBLIC;
grant SELECT on PROJECT_TRANS to UAM_QUERY;
grant DELETE on PROJECT_TRANS to UAM_UPDATE;
grant INSERT on PROJECT_TRANS to UAM_UPDATE;
grant SELECT on PROJECT_TRANS to UAM_UPDATE;
grant UPDATE on PROJECT_TRANS to UAM_UPDATE;
grant DELETE on PUBLICATION_AUTHOR_NAME to MANAGE_PUBLICATIONS;
grant INSERT on PUBLICATION_AUTHOR_NAME to MANAGE_PUBLICATIONS;
grant UPDATE on PUBLICATION_AUTHOR_NAME to MANAGE_PUBLICATIONS;
grant DELETE on PUBLICATION_AUTHOR_NAME to MVZ_PRODSUPPORT;
grant INSERT on PUBLICATION_AUTHOR_NAME to MVZ_PRODSUPPORT;
grant SELECT on PUBLICATION_AUTHOR_NAME to MVZ_PRODSUPPORT;
grant UPDATE on PUBLICATION_AUTHOR_NAME to MVZ_PRODSUPPORT;
grant SELECT on PUBLICATION_AUTHOR_NAME to PUBLIC;
grant SELECT on PUBLICATION_AUTHOR_NAME to UAM_QUERY;
grant DELETE on PUBLICATION_AUTHOR_NAME to UAM_UPDATE;
grant INSERT on PUBLICATION_AUTHOR_NAME to UAM_UPDATE;
grant SELECT on PUBLICATION_AUTHOR_NAME to UAM_UPDATE;
grant UPDATE on PUBLICATION_AUTHOR_NAME to UAM_UPDATE;
grant DELETE on SHIPMENT to MANAGE_TRANSACTIONS;
grant INSERT on SHIPMENT to MANAGE_TRANSACTIONS;
grant UPDATE on SHIPMENT to MANAGE_TRANSACTIONS;
grant DELETE on SHIPMENT to MVZ_PRODSUPPORT;
grant INSERT on SHIPMENT to MVZ_PRODSUPPORT;
grant SELECT on SHIPMENT to MVZ_PRODSUPPORT;
grant UPDATE on SHIPMENT to MVZ_PRODSUPPORT;
grant SELECT on SHIPMENT to PUBLIC;
grant SELECT on SHIPMENT to UAM_QUERY;
grant DELETE on SHIPMENT to UAM_UPDATE;
grant INSERT on SHIPMENT to UAM_UPDATE;
grant SELECT on SHIPMENT to UAM_UPDATE;
grant UPDATE on SHIPMENT to UAM_UPDATE;
grant DELETE on TAXON_RELATIONS to MANAGE_TAXONOMY;
grant INSERT on TAXON_RELATIONS to MANAGE_TAXONOMY;
grant UPDATE on TAXON_RELATIONS to MANAGE_TAXONOMY;
grant DELETE on TAXON_RELATIONS to MVZ_PRODSUPPORT;
grant INSERT on TAXON_RELATIONS to MVZ_PRODSUPPORT;
grant SELECT on TAXON_RELATIONS to MVZ_PRODSUPPORT;
grant UPDATE on TAXON_RELATIONS to MVZ_PRODSUPPORT;
grant SELECT on TAXON_RELATIONS to PUBLIC;
grant SELECT on TAXON_RELATIONS to UAM_QUERY;
grant DELETE on TAXON_RELATIONS to UAM_UPDATE;
grant INSERT on TAXON_RELATIONS to UAM_UPDATE;
grant SELECT on TAXON_RELATIONS to UAM_UPDATE;
grant UPDATE on TAXON_RELATIONS to UAM_UPDATE;
grant DELETE on VESSEL to MANAGE_LOCALITY;
grant INSERT on VESSEL to MANAGE_LOCALITY;
grant UPDATE on VESSEL to MANAGE_LOCALITY;
grant DELETE on VESSEL to MVZ_PRODSUPPORT;
grant INSERT on VESSEL to MVZ_PRODSUPPORT;
grant SELECT on VESSEL to MVZ_PRODSUPPORT;
grant UPDATE on VESSEL to MVZ_PRODSUPPORT;
grant SELECT on VESSEL to PUBLIC;
grant SELECT on VESSEL to UAM_QUERY;
grant DELETE on VESSEL to UAM_UPDATE;
grant INSERT on VESSEL to UAM_UPDATE;
grant SELECT on VESSEL to UAM_UPDATE;
grant UPDATE on VESSEL to UAM_UPDATE;


create or replace trigger coll_obj_cont_hist_bi
before insert on coll_obj_cont_hist                                             
for each row                                                                    
when (new.coll_obj_cont_hist_id is null)                                        
begin                                                                           
    select sq_coll_obj_cont_hist_id.nextval 
    into :new.coll_obj_cont_hist_id 
    from dual;                                                                  
end;        
