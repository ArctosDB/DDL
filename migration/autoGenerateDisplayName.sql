-- after changes to classification data, 
  -- replace anything in display_name with a call to autoGenerateDispalyName()
  -- replace anything in scientific_name with taxon_name.scientific_name
  
-- temp table to hold changes

create table cf_automaintain_taxonterms (classification_id varchar2(4000) not null);

-- old
drop table cf_autogen_display_name;


-- modify DDL/triggers/taxon_term to insert

-- procedure


-- to facilitate monitoring, log changes for a while
-- this can be removed after everything seems to be working

create table temp_dispnamelog (
	cid varchar2(4000),
	tid number,
	when date
);



CREATE OR REPLACE PROCEDURE proc_autogen_taxonterm IS
	dn varchar2(4000);
	tid number;
	src  varchar2(4000);
	sttid number;
begin
	for r in (select distinct classification_id from cf_autogen_display_name) loop
		-- flush any old stuff
		dbms_output.put_line('classification_id: ' || r.classification_id);
		delete from taxon_term where term_type='display_name' and classification_id=r.classification_id;
		-- see if we can create one
		select generateDisplayName(r.classification_id) into dn from dual;
		
		
		dbms_output.put_line('dn: ' || dn);
		
		if dn is not null then
			-- need some seed stuff
			select TAXON_NAME_ID,SOURCE into tid,src from taxon_term where TAXON_TERM_ID in (select min(TAXON_TERM_ID) from
			taxon_term where classification_id=r.classification_id);
			-- insert
			insert into taxon_term (
				TAXON_NAME_ID,
				CLASSIFICATION_ID,
				TERM,
				TERM_TYPE,
				SOURCE,
				LASTDATE
			) values (
				tid,
				r.classification_id,
				dn,
				'display_name',
				src,
				sysdate
			);
			
			
			insert into temp_dispnamelog (cid,tid,when) values (r.classification_id,tid,sysdate);



		end if;
		-- clean up
		delete from cf_autogen_display_name where classification_id=r.classification_id;
	end loop;
end;
/
sho err;


exec proc_autogen_display_name;


select taxon_name_id from taxon_term where classification_id='5A29D2E4-0F5F-FADC-717C73704DA3A902';


select * from temp_dispnamelog;
select * from cf_autogen_display_name;

select scientific_name from taxon_name where taxon_name_id in (select tid from temp_dispnamelog);

select STATE,LAST_START_DATE,NEXT_RUN_DATE from all_scheduler_jobs where lower(JOB_NAME)='j_proc_autogen_display_name';


BEGIN
  DBMS_SCHEDULER.CREATE_JOB (
    job_name    => 'J_proc_autogen_display_name',
    job_type    => 'STORED_PROCEDURE',
    job_action    => 'proc_autogen_display_name',
    enabled     => TRUE,
    end_date    => NULL,
    start_date  =>  SYSTIMESTAMP,
	repeat_interval  =>  'freq=minutely; interval=5'
  );
END;
/ 
