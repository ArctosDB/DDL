--from https://github.com/ArctosDB/arctos/issues/983
-- actually nevermind - this isn't necessary, nobody will want to claim it, no need to have any constraints, treat it like the stuff from GN
--insert into  CTTAXONOMY_SOURCE (SOURCE,DESCRIPTION) values ('Arctos Relationships','Place to store related taxon data in classifications as a search aid. These data are not an authoritative taxonomy source.');
--delete from CTTAXONOMY_SOURCE where source='Arctos Relationships';
-- ignore that in triggers


create or replace trigger trg_taxon_term_cts....

-- seed with existing data

alter table taxon_relations add stale_fg number;




CREATE OR REPLACE PROCEDURE proc_ref_taxon_relations IS
	cid varchar2(4000);
begin
	for r in (select * from taxon_relations where stale_fg=1 and rownum<250 ) loop
		-- just delete any existing
		delete from taxon_term where classification_id in (
			select 
				nvl(classification_id,-1) 
			from 
				taxon_term 
			where 
				taxon_name_id=r.taxon_name_id and
				source='Arctos Relationships' and 
				term_type='scientific_name' and 
				term=(select scientific_name from taxon_name where taxon_name_id=r.related_taxon_name_id)
		);
		delete from taxon_term where classification_id in (
			select 
				nvl(classification_id,-1) 
			from 
				taxon_term 
			where 
				taxon_name_id=r.related_taxon_name_id and
				source='Arctos Relationships' and 
				term_type='scientific_name' and 
				term=(select scientific_name from taxon_name where taxon_name_id=r.taxon_name_id)
		);
	
		-- insert for TAXON_NAME_ID
		
		--dbms_output.put_line(r.taxon_name_id);
		--dbms_output.put_line('TAXON_RELATIONS_ID::'||r.TAXON_RELATIONS_ID);
		
		select sys_guid() into cid from dual;
		
		-- insert only classification terms; don't care about the meta here
		insert into taxon_term (
			TAXON_NAME_ID,
			CLASSIFICATION_ID,
			TERM,
			TERM_TYPE,
			SOURCE,
			POSITION_IN_CLASSIFICATION
		) (
			select distinct
				r.taxon_name_id,
				cid,
				term,
				term_type,
				'Arctos Relationships',
				POSITION_IN_CLASSIFICATION
			from
				taxon_term
			where
				taxon_name_id=r.related_taxon_name_id and
				POSITION_IN_CLASSIFICATION is not null and
				source in (select source from CTTAXONOMY_SOURCE where source != 'Arctos Relationships')
		);
		insert into taxon_term (
			TAXON_NAME_ID,
			CLASSIFICATION_ID,
			TERM,
			TERM_TYPE,
			SOURCE
		) values (
			r.taxon_name_id,
			cid,
			'Autogenerated from relationship "' || r.TAXON_RELATIONSHIP || '."' || decode(r.RELATION_AUTHORITY,NULL,'',' Authority: ' || r.RELATION_AUTHORITY),
			'remark',
			'Arctos Relationships'
		);

			
		-- now insert for RELATED_TAXON_NAME_ID
		
		--dbms_output.put_line(r.RELATED_TAXON_NAME_ID);
	
		select sys_guid() into cid from dual;
		
	
		insert into taxon_term (
			TAXON_NAME_ID,
			CLASSIFICATION_ID,
			TERM,
			TERM_TYPE,
			SOURCE,
			POSITION_IN_CLASSIFICATION
		) (
			select distinct
				r.RELATED_TAXON_NAME_ID,
				cid,
				term,
				term_type,
				'Arctos Relationships',
				POSITION_IN_CLASSIFICATION
			from
				taxon_term
			where
				taxon_name_id=r.taxon_name_id and
				POSITION_IN_CLASSIFICATION is not null and
				source in (select source from CTTAXONOMY_SOURCE where source != 'Arctos Relationships')
		);
		insert into taxon_term (
			TAXON_NAME_ID,
			CLASSIFICATION_ID,
			TERM,
			TERM_TYPE,
			SOURCE
		) values (
			r.RELATED_TAXON_NAME_ID,
			cid,
			'Autogenerated from relationship "' || r.TAXON_RELATIONSHIP || '."' || decode(r.RELATION_AUTHORITY,NULL,'',' Authority: ' || r.RELATION_AUTHORITY),
			'remark',
			'Arctos Relationships'
		);
		update taxon_relations set stale_fg=0 where TAXON_RELATIONS_ID=r.TAXON_RELATIONS_ID;
		
	end loop;
end ;
/

select scientific_name from taxon_name, taxon_term where taxon_name.taxon_name_id=taxon_term.taxon_name_id and taxon_term.source='Arctos Relationships' group by scientific_name order by scientific_name;

select a.taxon_name_id from taxon_term a, taxon_term b, taxon_term c
where a.taxon_Name_id=b.taxon_name_id and a.taxon_Name_id=c.taxon_name_id and
a.source='Arctos' and b.source='Arctos Plants' and c.source='Arctos Relationships'
group by a.taxon_name_id;


select stale_fg,count(*) from taxon_relations group by stale_fg;
Elapsed: 00:00:00.00
UAM@ARCTOSTE> 

select stale_fg,count(*) from taxon_relations group by stale_fg;

  STALE_FG   COUNT(*)
---------- ----------
		  220
	 1     274007
	 0	10776

  STALE_FG   COUNT(*)
---------- ----------
		  220
	 1     283987
	 0	  796


exec proc_ref_taxon_relations;
-- this can probably drop to daily or hourly or something after we're caught up
-- for now, every minute
BEGIN
DBMS_SCHEDULER.CREATE_JOB (
   job_name           =>  'j_proc_ref_taxon_relations',
   job_type           =>  'STORED_PROCEDURE',
   job_action         =>  'proc_ref_taxon_relations',
   start_date         =>  SYSTIMESTAMP,
   repeat_interval    =>  'freq=MINUTELY',
   enabled             =>  TRUE,
   end_date           =>  NULL,
   comments           =>  'push taxon relations to classifications');
END;
/

select STATE,LAST_START_DATE,NEXT_RUN_DATE,LAST_RUN_DURATION from all_scheduler_jobs where lower(JOB_NAME)='j_proc_ref_taxon_relations';

exec DBMS_SCHEDULER.DROP_JOB (JOB_NAME => 'j_proc_ref_taxon_relations', FORCE => TRUE);


update taxon_relations set stale_fg=1 where TAXON_RELATIONS_ID in (select TAXON_RELATIONS_ID from temp_tax_rel where pushed_to_class is null);




--delete from taxon_term where source='Arctos Relationships';
